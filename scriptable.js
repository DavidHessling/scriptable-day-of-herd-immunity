// Licence: Robert Koch-Institut (RKI), dl-de/by-2-0
const rkiApiF√ºrImpfdaten = 'https://rki-vaccination-data.vercel.app/api'
const rkiApiF√ºrInfektionsdaten =
  'https://opendata.arcgis.com/datasets/c2f3c3b935a242169c6bec82e1fa573e_0.geojson?where=AdmUnitId%20%3E%3D%200%20AND%20AdmUnitId%20%3C%3D%200'

const optimistischerGrenzwertHerdenimmunit√§t = 49200000 // 60% der deutschen Bev√∂lkerung
const pessimistischerGrenzwertHerdenimmunit√§t = 65600000 // 80% der deutschen Bev√∂lkerung

const widget = await createWidget()

if (!config.runsInWidget) {
  await widget.presentSmall()
}

Script.setWidget(widget)
Script.complete()

async function createWidget (items) {
  var anzahlTageBisHerdenimmunit√§tOptimistisch = await getAnzahlTageBisHerdenimmunit√§t(
    optimistischerGrenzwertHerdenimmunit√§t
  )

  var anzahlTageBisHerdenimmunit√§tPessimistisch = await getAnzahlTageBisHerdenimmunit√§t(
    pessimistischerGrenzwertHerdenimmunit√§t
  )

  var tagXOptimistisch = getTagX(anzahlTageBisHerdenimmunit√§tOptimistisch)

  var tagXPessimistisch = getTagX(anzahlTageBisHerdenimmunit√§tPessimistisch)

  return erstelleWidget(tagXOptimistisch, tagXPessimistisch)
}

/**
 * Berechnet auf Basis von tageaktuellen Daten die Anzahl der Tage bis eine Herdenimmunit√§t erreicht ist
 * @param {*} grenzeHerdenimmunit√§t Entweder optimistischer (60%) oder pessimistischer (80%) Grenzwert
 */
async function getAnzahlTageBisHerdenimmunit√§t (grenzeHerdenimmunit√§t) {
  const impfdaten = await getImpfdaten()
  const infektionsdaten = await getInfektionsdaten()

  var anzahlNeuerErstimpfungen =
    impfdaten.difference_to_the_previous_day -
    impfdaten['2nd_vaccination'].difference_to_the_previous_day

  var anzahlGesamterImpfungen = impfdaten.vaccinated

  var anzahlNeuerF√§lle = infektionsdaten.AnzFallNeu
  var anzahlGesamterF√§lle = infektionsdaten.AnzFall

  var anzahlNichtImmuner =
    grenzeHerdenimmunit√§t - anzahlGesamterF√§lle - anzahlGesamterImpfungen

  var anzahlTageBisHerdenimmunit√§t =
    anzahlNichtImmuner / (anzahlNeuerErstimpfungen + anzahlNeuerF√§lle)

  return anzahlTageBisHerdenimmunit√§t
}

/**
 * Erstellt ein Datum das x Tage von heute entfernt ist.
 * @param {*} tageBisHerdenimmunit√§t Anzahl Tage bis Herdenimmunit√§t
 */

function getTagX (tageBisHerdenimmunit√§t) {
  var heute = new Date()
  heute.setDate(heute.getDate() + tageBisHerdenimmunit√§t)
  return heute
}

/**
 * Erstellen und stylen des Widgets
 * @param {*} tagXOptimistisch Stichtag f√ºr Herdenimmunit√§t im optimistischen Szenario
 * @param {*} tagXPessimistisch Stichtag f√ºr Herdenimmunit√§t im pessimistischen Szenario
 */
function erstelleWidget (tagXOptimistisch, tagXPessimistisch) {
  const list = new ListWidget()
  list.refreshAfterDate = new Date(Date.now() + 60 * 60 * 1000)

  const header = list.addText('ü¶†Tag der Herdenimmunit√§t'.toUpperCase())
  header.font = Font.mediumSystemFont(10)

  list.addSpacer()

  const labelOpt = list.addText(
    'Bis 60%: ' + tagXOptimistisch.toLocaleDateString()
  )
  labelOpt.textColor = Color.green()
  labelOpt.font = Font.mediumSystemFont(13)

  list.addSpacer()

  const labelPes = list.addText(
    'Bis 80%: ' + tagXPessimistisch.toLocaleDateString()
  )
  labelPes.textColor = Color.red()
  labelPes.font = Font.mediumSystemFont(13)

  return list
}

/**
 * L√§dt tagesaktuelle Impfdaten vom RKI
 */
async function getImpfdaten () {
  try {
    return await new Request(rkiApiF√ºrImpfdaten).loadJSON()
  } catch (e) {
    throw new Error('Could not retrieve data from RKI API.')
  }
}

/**
 * L√§dt tagesaktuelle Infektionsdaten vom RKI
 */
async function getInfektionsdaten () {
  try {
    var data = await new Request(rkiApiF√ºrInfektionsdaten).loadJSON()
    return data.features[0].properties
  } catch (e) {
    throw new Error('Could not retrieve data from RKI API.')
  }
}
